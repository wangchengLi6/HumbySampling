// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// HUMExactRuleOne_R
double HUMExactRuleOne_R(int M, IntegerVector nvec_R, NumericMatrix Ematrix_R);
RcppExport SEXP _HumbySampling_HUMExactRuleOne_R(SEXP MSEXP, SEXP nvec_RSEXP, SEXP Ematrix_RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nvec_R(nvec_RSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Ematrix_R(Ematrix_RSEXP);
    rcpp_result_gen = Rcpp::wrap(HUMExactRuleOne_R(M, nvec_R, Ematrix_R));
    return rcpp_result_gen;
END_RCPP
}
// HUMExactRuleThree_R
double HUMExactRuleThree_R(int M, IntegerVector nvec_R, NumericMatrix Ematrix_R);
RcppExport SEXP _HumbySampling_HUMExactRuleThree_R(SEXP MSEXP, SEXP nvec_RSEXP, SEXP Ematrix_RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nvec_R(nvec_RSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Ematrix_R(Ematrix_RSEXP);
    rcpp_result_gen = Rcpp::wrap(HUMExactRuleThree_R(M, nvec_R, Ematrix_R));
    return rcpp_result_gen;
END_RCPP
}
// HUMApproxRuleAll_R
Rcpp::List HUMApproxRuleAll_R(int R, int M, IntegerVector vec_ni_R, NumericMatrix Ematrix_R, double eta, int if_std, int rule_type);
RcppExport SEXP _HumbySampling_HUMApproxRuleAll_R(SEXP RSEXP, SEXP MSEXP, SEXP vec_ni_RSEXP, SEXP Ematrix_RSEXP, SEXP etaSEXP, SEXP if_stdSEXP, SEXP rule_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type R(RSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type vec_ni_R(vec_ni_RSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Ematrix_R(Ematrix_RSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< int >::type if_std(if_stdSEXP);
    Rcpp::traits::input_parameter< int >::type rule_type(rule_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(HUMApproxRuleAll_R(R, M, vec_ni_R, Ematrix_R, eta, if_std, rule_type));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_HumbySampling_HUMExactRuleOne_R", (DL_FUNC) &_HumbySampling_HUMExactRuleOne_R, 3},
    {"_HumbySampling_HUMExactRuleThree_R", (DL_FUNC) &_HumbySampling_HUMExactRuleThree_R, 3},
    {"_HumbySampling_HUMApproxRuleAll_R", (DL_FUNC) &_HumbySampling_HUMApproxRuleAll_R, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_HumbySampling(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
